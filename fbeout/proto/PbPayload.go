//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: payload.fbe
// FBE version: 1.14.1.0
//------------------------------------------------------------------------------

package proto

import (
	"errors"
	"fmt"
	"myfbe/fbe"
	"strconv"
	"strings"
)

// Workaround for Go unused imports issue
var _ = errors.New
var _ = fbe.Version

// Workaround for Go unused imports issue
var _ = fmt.Print
var _ = strconv.FormatInt

// PbPayload key
type PbPayloadKey struct {
}

// Convert PbPayload flags key to string
func (k *PbPayloadKey) String() string {
	var sb strings.Builder
	sb.WriteString("PbPayloadKey(")
	sb.WriteString(")")
	return sb.String()
}

// PbPayload struct
type PbPayload struct {
	StringEntry         string           `json:"StringEntry"`
	SmallInteger        int32            `json:"SmallInteger"`
	NormalInteger       int64            `json:"NormalInteger"`
	SerializationMethod string           `json:"SerializationMethod"`
	Boolean             bool             `json:"Boolean"`
	SomeFloat           float32          `json:"SomeFloat"`
	IntArray            []int32          `json:"IntArray"`
	Chart               map[int32]string `json:"Chart"`
	SubShop             SubStruct        `json:"SubShop"`
}

// Create a new PbPayload struct
func NewPbPayload() *PbPayload {
	return &PbPayload{
		StringEntry:         "",
		SmallInteger:        0,
		NormalInteger:       0,
		SerializationMethod: "",
		Boolean:             false,
		SomeFloat:           0.0,
		IntArray:            make([]int32, 0),
		Chart:               make(map[int32]string),
		SubShop:             *NewSubStruct(),
	}
}

// Create a new PbPayload struct from the given field values
func NewPbPayloadFromFieldValues(StringEntry string, SmallInteger int32, NormalInteger int64, SerializationMethod string, Boolean bool, SomeFloat float32, IntArray []int32, Chart map[int32]string, SubShop SubStruct) *PbPayload {
	return &PbPayload{StringEntry, SmallInteger, NormalInteger, SerializationMethod, Boolean, SomeFloat, IntArray, Chart, SubShop}
}

// Struct shallow copy
func (s *PbPayload) Copy() *PbPayload {
	var result = *s
	return &result
}

// Struct deep clone
func (s *PbPayload) Clone() *PbPayload {
	// Serialize the struct to the FBE stream
	writer := NewPbPayloadModel(fbe.NewEmptyBuffer())
	_, _ = writer.Serialize(s)

	// Deserialize the struct from the FBE stream
	reader := NewPbPayloadModel(writer.Buffer())
	result, _, _ := reader.Deserialize()
	return result
}

// Get the struct key
func (s *PbPayload) Key() PbPayloadKey {
	return PbPayloadKey{}
}

// Convert struct to optional
func (s *PbPayload) Optional() *PbPayload {
	return s
}

// Get the FBE type
func (s *PbPayload) FBEType() int { return 2 }

// Convert struct to string
func (s *PbPayload) String() string {
	var sb strings.Builder
	sb.WriteString("PbPayload(")
	sb.WriteString("StringEntry=")
	sb.WriteString("\"" + s.StringEntry + "\"")
	sb.WriteString(",SmallInteger=")
	sb.WriteString(strconv.FormatInt(int64(s.SmallInteger), 10))
	sb.WriteString(",NormalInteger=")
	sb.WriteString(strconv.FormatInt(int64(s.NormalInteger), 10))
	sb.WriteString(",SerializationMethod=")
	sb.WriteString("\"" + s.SerializationMethod + "\"")
	sb.WriteString(",Boolean=")
	sb.WriteString(strconv.FormatBool(s.Boolean))
	sb.WriteString(",SomeFloat=")
	sb.WriteString(strconv.FormatFloat(float64(s.SomeFloat), 'g', -1, 32))
	sb.WriteString(",IntArray=")
	if s.IntArray != nil {
		first := true
		sb.WriteString("[" + strconv.FormatInt(int64(len(s.IntArray)), 10) + "][")
		for _, v := range s.IntArray {
			if first {
				sb.WriteString("")
			} else {
				sb.WriteString(",")
			}
			sb.WriteString(strconv.FormatInt(int64(v), 10))
			first = false
		}
		sb.WriteString("]")
	} else {
		sb.WriteString(",IntArray=[0][]")
	}
	sb.WriteString(",Chart=")
	if s.Chart != nil {
		first := true
		sb.WriteString("[" + strconv.FormatInt(int64(len(s.Chart)), 10) + "]<{")
		for k, v := range s.Chart {
			if first {
				sb.WriteString("")
			} else {
				sb.WriteString(",")
			}
			sb.WriteString(strconv.FormatInt(int64(k), 10))
			sb.WriteString("->")
			sb.WriteString("\"" + v + "\"")
			first = false
		}
		sb.WriteString("}>")
	} else {
		sb.WriteString(",Chart=[0]<{}>")
	}
	sb.WriteString(",SubShop=")
	sb.WriteString(s.SubShop.String())
	sb.WriteString(")")
	return sb.String()
}
