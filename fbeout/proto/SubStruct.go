//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: payload.fbe
// FBE version: 1.14.1.0
//------------------------------------------------------------------------------

package proto

import "fmt"
import "strconv"
import "strings"
import "errors"
import "../fbe"

// Workaround for Go unused imports issue
var _ = errors.New
var _ = fbe.Version

// Workaround for Go unused imports issue
var _ = fmt.Print
var _ = strconv.FormatInt

// SubStruct key
type SubStructKey struct {
}

// Convert SubStruct flags key to string
func (k *SubStructKey) String() string {
    var sb strings.Builder
    sb.WriteString("SubStructKey(")
    sb.WriteString(")")
    return sb.String()
}

// SubStruct struct
type SubStruct struct {
    Cat string `json:"Cat"`
    Feeling string `json:"Feeling"`
}

// Create a new SubStruct struct
func NewSubStruct() *SubStruct {
    return &SubStruct{
        Cat: "",
        Feeling: "",
    }
}

// Create a new SubStruct struct from the given field values
func NewSubStructFromFieldValues(Cat string, Feeling string) *SubStruct {
    return &SubStruct{Cat, Feeling}
}

// Struct shallow copy
func (s *SubStruct) Copy() *SubStruct {
    var result = *s
    return &result
}

// Struct deep clone
func (s *SubStruct) Clone() *SubStruct {
    // Serialize the struct to the FBE stream
    writer := NewSubStructModel(fbe.NewEmptyBuffer())
    _, _ = writer.Serialize(s)

    // Deserialize the struct from the FBE stream
    reader := NewSubStructModel(writer.Buffer())
    result, _, _ := reader.Deserialize()
    return result
}

// Get the struct key
func (s *SubStruct) Key() SubStructKey {
    return SubStructKey{
    }
}

// Convert struct to optional
func (s *SubStruct) Optional() *SubStruct {
    return s
}

// Get the FBE type
func (s *SubStruct) FBEType() int { return 1 }

// Convert struct to string
func (s *SubStruct) String() string {
    var sb strings.Builder
    sb.WriteString("SubStruct(")
    sb.WriteString("Cat=")
    sb.WriteString("\"" + s.Cat + "\"")
    sb.WriteString(",Feeling=")
    sb.WriteString("\"" + s.Feeling + "\"")
    sb.WriteString(")")
    return sb.String()
}
